ORM:
-> Object-Relation Mapper
-> A programming technique that helps application to interact with database such as SQLite, MySQL, PostgreSQL, Oracle.
-> Create a database schema from defined classes or models
-> generate SQL from python code
-> Helps to change the database easily
-> Use connectors to connect databases with a web application


QuerySet:
-> List containing all those objects we have created using the Django model
-> Helps us in reading the data, filtering and order 


Model:
-> Single, definitive source of information about our data
-> Contains essential fields and behaviors of the data
-> each model maps to a single database table


Model Class:
-> Class which will represent a table in database
-> Each model is a Python class that subclasses django.db.models.Model
-> Each attribute represents a database field
-> Django gives automatically-generated database-access API
-> Django provides SQLite database by default
-> We can use other database like MySQL, Oracle SQL etc.


Migrations:
-> Migrations are way of propagating changes to make models (adding a field, deleting a model, etc.) into your database schema.

# makemigrations: is used to convert model class into sql statements. create a file which will contain sql statements. This file is located in Application's migrations folder.
		
			python manage.py makemigrations


# migrate: is used to execute sql statements generated by makemigrations

			python manage.py migrate

# showmigrations: This lists a project's migrations



Built-in Field Options:

# null: contain either True or False. If True, Django will store empty values as NULL in the database. Default is False.

# blank: contain either True or False. If True, the field is allowed to be blank.

Note: null is purely database-related, whereas blank is validation-related.

# default: default value for the field.

# verbose_name: A human-readable name for the field. If the verbose name isn't given, Django will automatically create it using the field's attribute name, converting underscores to spaces. 

# db_column: The name of the database column to use for this field. If this isn't given, Django will use the field's name.

# primary_key: If True, that field will be the primary key for the model.

# unique: If True, this field must be unique throughout the table. This is enforced at the database level and by model validation.

Some more fields:

-> IntegerField
-> AutoField
-> FloatField
-> TextField
-> CharField
-> BooleanField
-> EmailField
-> URLField



# To create superuser

python manage.py createsuperuser


Model Form:
-> In Django, a ModelForm is a form tat is automatically generated from an existing model.
-> A ModelForm includes all the fields defined in the model, along with any additional validation and processing logic 
that you define in the form class.


Meta Class:
-> A metaclass is a class that defines how other classes should behave. provides additional information about the model form. Here are some common options that can be defined in the Meta class:

# model: The model that form is based on.

# fields: a list of fields to include in the form. If this option is not specified, all fields in the model will be included in the form.

# exclude: A list of fields to exclude from the form. 

# widgets: A dictionary of field names and their associated labels.

# labels: A dictionary of field names and their associated labels.

# help_texts: A dictionary of field names and their associated help text.

# error_messages: A dictionary of field names and their associated error messages.




Model Form Fields:

# AutoField: Not Represented in the Form

# BigAutoField: Not Represented in the Form
